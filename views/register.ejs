<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="/styles/login-register.css">
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
</head>
<body>
    
    <header class="header">
            <div class="logo"><a href="/">Quantia</a></div>
    </header>
    <main>
    <p></p>
    <div class="wrapper">
        <form>
            <h1>Register</h1>
            <div class="input-box">
                <input type="text" id="reg-username" placeholder="Username" required>
                <i class='bx bxs-user'></i>
            </div>
            <div class="input-box">
                <input type="password" id="reg-password" placeholder="Password" required>
                <i class='bx bxs-lock-alt'></i>
            </div>

            <div class="input-box">
                <input type="email" id="reg-email" placeholder="Email" required>
                <i class='bx bxs-envelope' ></i>
            </div>

            <button class="btn" onclick="registerUser()">Submit</button>

            <div class="register-link">
                <p>Have already an account? <a href="/login">Sign up</a></p>
            </div>

        </form>
    </div>
    </main>

    <script>
   async function registerUser() {
    const username = document.getElementById('reg-username').value;
    const password = document.getElementById('reg-password').value;
    const email = document.getElementById('reg-email').value;
    
    // Validación básica de campos
    if (!username || !password || !email) {
        alert("Por favor, complete todos los campos.");
        return;
    }
    
    try {
        console.log("Enviando solicitud de registro...");
        
        const response = await fetch('/db/register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username, password, email })
        });

        // Verificar el tipo de contenido de la respuesta
        const contentType = response.headers.get('content-type');
        let data;
        
        if (contentType && contentType.includes('application/json')) {
            data = await response.json();
        } else {
            const text = await response.text();
            throw new Error(`Respuesta inesperada del servidor: ${text.substring(0, 100)}`);
        }

        console.log("Respuesta recibida:", data);

        if (!response.ok) {
            // Mostrar mensaje de error del servidor si existe
            const errorMessage = data.message || data.error || 'Error desconocido en el registro';
            alert(`Error: ${errorMessage}`);
            throw new Error(errorMessage);
        }
        
        // Verificar que tenemos un userId antes de redirigir
        if (!data.userId) {
            throw new Error("El servidor no devolvió un ID de usuario válido");
        }
        
        // Limpiar formulario
        document.getElementById('reg-username').value = '';
        document.getElementById('reg-password').value = '';
        document.getElementById('reg-email').value = '';
        
        console.log("Registro exitoso. Redirigiendo al quiz con ID:", data.userId);
        
        // Redirigir al quiz con el ID del usuario
        window.location.href = `/quiz?id=${data.userId}`;

    } catch (error) {
        console.error('Error en registro:', error);
        
        // Mostrar mensaje de error apropiado
        if (error.message.includes('Respuesta inesperada')) {
            alert("Error de comunicación con el servidor. Por favor, intente nuevamente.");
        } else if (error.message.includes('ID de usuario')) {
            alert("Error en el registro. Por favor, contacte al administrador.");
        } else {
            alert("Error en el registro: " + error.message);
        }
    }
}
        
    </script>
</body>
</html>